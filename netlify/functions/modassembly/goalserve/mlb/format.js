/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

function formatScheduleData(rawData) {
    if (!rawData) {
        return { error: "Invalid or missing data structure" };
    }

    const scheduleData = {
        league: rawData['@sport'],
        season: rawData.category['@season'],
        upcoming_games: []
    };

    const upcomingGamesLimit = 10;
    
    // Check if matches exists
    if (rawData.category.matches) {
        // Handle both array of match days and single match day object
        const matchDays = Array.isArray(rawData.category.matches) 
            ? rawData.category.matches 
            : [rawData.category.matches];
        
        // Process each match day
        matchDays.forEach(matchDay => {
            if (matchDay.match && Array.isArray(matchDay.match)) {
                // Process all matches for a given day
                matchDay.match.forEach(match => {
                    // Only include upcoming games (status "Not Started")
                    // And limit to first 10 games
                    if (match['@status'] === "Not Started" && scheduleData.upcoming_games.length < upcomingGamesLimit) {
                        scheduleData.upcoming_games.push({
                            date: match['@formatted_date'],
                            time: match['@time'],
                            home_team: match.hometeam['@name'],
                            away_team: match.awayteam['@name'],
                            tournament_name: rawData.category['@name'],
                            venue: match['@venue_name'],
                        });
                    }
                });
            }
        });
    }

    return scheduleData;
}

function formatStandingsData(rawData) {
    if (!rawData || !rawData.category) {
        return { error: "Invalid or missing standings data structure" };
    }

    const formattedStandings = {
        league: rawData.category['@name'],
        season: rawData.category['@season'],
        sport: rawData['@sport'],
        conferences: []
    };

    // Process each conference (e.g., American League/National League for MLB)
    if (rawData.category.league && Array.isArray(rawData.category.league)) {
        rawData.category.league.forEach(conference => {
            const formattedConference = {
                name: conference['@name'],
                divisions: []
            };
            // Process each division in the conference
            if (conference.division && Array.isArray(conference.division)) {
                conference.division.forEach(division => {
                    const formattedDivision = {
                        name: division['@name'],
                        teams: []
                    };
                    // Process each team in the division
                    if (division.team && Array.isArray(division.team)) {
                        division.team.forEach(team => {
                            // Include only the most relevant fields for predictions
                            formattedDivision.teams.push({
                                name: team['@name'],
                                position: team['@position'],
                                won: team['@won'],
                                lost: team['@lost'],
                                home_record: team['@home_record'],
                                road_record: team['@away_record'],
                                points_for: team['@runs_scored'] || team['@points_for'],
                                points_against: team['@runs_allowed'] || team['@points_against'],
                                difference: team['@runs_diff'] || team['@difference'],
                                streak: team['@current_streak'] || team['@streak'],
                                games_back: team['@games_back']
                            });
                        });
                    }
                    formattedConference.divisions.push(formattedDivision);
                });
            }
            formattedStandings.conferences.push(formattedConference);
        });
    }

    return formattedStandings;
}

function formatScoresData(rawData) {
    if (!rawData || !rawData.scores) {
        return { error: "Invalid or missing scores data structure" };
    }

    // Initialize results
    const scoresData = {
        teams: {},
        players: {}
    }

    // Set limit for scoresData items
    const MAX_ITEMS = 25000;
    let itemCount = 0;

    // Handle rawData.scores as an array
    const scoresArray = Array.isArray(rawData.scores) ? rawData.scores : [rawData.scores];

    for (const scoreItem of scoresArray) {
        // Check if we've reached the limit
        if (itemCount >= MAX_ITEMS) {
            console.warn(`Reached maximum limit of ${MAX_ITEMS} items. Stopping processing.`);
            break;
        }

        // Handle both array and single match cases for each score item
        const matches = scoreItem.category && scoreItem.category.match 
            ? (Array.isArray(scoreItem.category.match) 
                ? scoreItem.category.match 
                : [scoreItem.category.match])
            : [];

        for (const match of matches) {
            // Check if we've reached the limit
            if (itemCount >= MAX_ITEMS) {
                console.warn(`Reached maximum limit of ${MAX_ITEMS} items. Stopping processing.`);
                break;
            }

            // Compute home team
            if (match.hometeam) {
                const homeTeamId = match.hometeam['@id'];
                if (!scoresData.teams[homeTeamId]) {
                    scoresData.teams[homeTeamId] = {
                        name: match.hometeam['@name'],
                        stats: {
                            hits: 0,
                            errors: 0,
                            totalscore: 0,
                            innings: {}
                        }
                    };
                    itemCount++;
                }
                
                const homeTeam = scoresData.teams[homeTeamId];
                homeTeam.stats.hits = parseInt(match.hometeam['@hits']) || 0;
                homeTeam.stats.errors = parseInt(match.hometeam['@errors']) || 0;
                homeTeam.stats.totalscore = parseInt(match.hometeam['@totalscore']) || 0;
                // Process innings
                // if (match.hometeam.innings && match.hometeam.innings.inning) {
                //     const innings = Array.isArray(match.hometeam.innings.inning) 
                //         ? match.hometeam.innings.inning 
                //         : [match.hometeam.innings.inning];
                        
                //     innings.forEach(inning => {
                //         homeTeam.stats.innings[inning['@number']] = {
                //             hits: parseInt(inning['@hits']) || 0,
                //             score: parseInt(inning['@score']) || 0
                //         };
                //     });
                // }
            }
            
            // Compute away team
            if (match.awayteam) {
                const awayTeamId = match.awayteam['@id'];
                if (!scoresData.teams[awayTeamId]) {
                    scoresData.teams[awayTeamId] = {
                        name: match.awayteam['@name'],
                        stats: {
                            hits: 0,
                            errors: 0,
                            totalscore: 0,
                            innings: {}
                        }
                    };
                    itemCount++;
                }
                
                const awayTeam = scoresData.teams[awayTeamId];
                awayTeam.stats.hits = parseInt(match.awayteam['@hits']) || 0;
                awayTeam.stats.errors = parseInt(match.awayteam['@errors']) || 0;
                awayTeam.stats.totalscore = parseInt(match.awayteam['@totalscore']) || 0;
                
                // Process innings
                // if (match.awayteam.innings && match.awayteam.innings.inning) {
                //     const innings = Array.isArray(match.awayteam.innings.inning) 
                //         ? match.awayteam.innings.inning 
                //         : [match.awayteam.innings.inning];
                        
                //     innings.forEach(inning => {
                //         awayTeam.stats.innings[inning['@number']] = {
                //             hits: parseInt(inning['@hits']) || 0,
                //             score: parseInt(inning['@score']) || 0
                //         };
                //     });
                // }
            }

            if (match.events) {
                // Process baseball events
                const processEvents = (events) => {
                    if (!events) return;
                    
                    // Handle both single events and arrays of events
                    const eventArray = Array.isArray(events.event) ? events.event : [events.event];
                    
                    eventArray.forEach(evt => {
                        // Check if we've reached the limit
                        if (itemCount >= MAX_ITEMS) {
                            return; // Skip processing this event
                        }

                        if (!evt || !evt['@desc']) return;
                        
                        // Extract player name from event description
                        const playerMatch = evt['@desc'].match(/^([A-Za-z\-]+)\s/);
                        const playerId = playerMatch ? playerMatch[1].toLowerCase() : null;
                        
                        if (playerId) {
                            // Initialize player if not exists
                            if (!scoresData.players[playerId]) {
                                scoresData.players[playerId] = {
                                    name: playerMatch[1],
                                    stats: {
                                        home_runs: 0,
                                        singles: 0,
                                        doubles: 0,
                                        rbi: 0
                                    }
                                };
                                itemCount++;
                            }
                            
                            // Update player statistics based on event description
                            if (evt['@desc'].includes('homered')) {
                                scoresData.players[playerId].stats.home_runs++;
                            } else if (evt['@desc'].includes('doubled')) {
                                scoresData.players[playerId].stats.doubles++;
                            } else if (evt['@desc'].includes('singled')) {
                                scoresData.players[playerId].stats.singles++;
                            }
                            
                            // Count RBIs
                            const rbiMatch = evt['@desc'].match(/scored(?: and [A-Za-z\-]+ scored)*(?:,|\.)/);
                            if (rbiMatch) {
                                const scorers = (rbiMatch[0].match(/[A-Za-z\-]+/g) || []).length;
                                scoresData.players[playerId].stats.rbi += scorers;
                            }
                        }
                    });
                };

                processEvents(match.events);
            }
        }
    }

    // Add metadata about the limit
    scoresData.metadata = {
        totalItems: itemCount,
        limitReached: itemCount >= MAX_ITEMS,
        maxItems: MAX_ITEMS
    };

    return scoresData;
}

// Function to compress scoresData for OpenAI prompts
function compressScoresDataForOpenAI(scoresData, maxCharacters = 30000) {
    if (!scoresData || scoresData.error) {
        return scoresData;
    }

    // Create compressed version
    const compressed = {
        t: {}, // teams
        p: {}, // players
        m: scoresData.metadata // metadata
    };

    // Compress teams data
    Object.keys(scoresData.teams).forEach(teamId => {
        const team = scoresData.teams[teamId];
        compressed.t[teamId] = {
            n: team.name, // name
            h: team.stats.hits, // hits
            e: team.stats.errors, // errors
            s: team.stats.totalscore // score
        };
    });

    // Compress players data - only include players with significant stats
    Object.keys(scoresData.players).forEach(playerId => {
        const player = scoresData.players[playerId];
        const stats = player.stats;
        
        // Only include players with meaningful stats
        const totalStats = stats.home_runs + stats.singles + stats.doubles + stats.rbi;
        if (totalStats > 0) {
            compressed.p[playerId] = {
                n: player.name, // name
                hr: stats.home_runs, // home_runs
                s: stats.singles, // singles
                d: stats.doubles, // doubles
                r: stats.rbi // rbi
            };
        }
    });

    // Check character count and further compress if needed
    const jsonString = JSON.stringify(compressed);
    if (jsonString.length > maxCharacters) {
        return compressScoresDataForOpenAIAdvanced(scoresData, maxCharacters);
    }

    return compressed;
}

// Advanced compression for very large datasets
function compressScoresDataForOpenAIAdvanced(scoresData, maxCharacters = 30000) {
    // Sort teams by total score (descending)
    const sortedTeams = Object.entries(scoresData.teams)
        .sort(([,a], [,b]) => b.stats.totalscore - a.stats.totalscore)
        .slice(0, 50); // Keep top 50 teams

    // Sort players by total impact (home runs + RBIs)
    const sortedPlayers = Object.entries(scoresData.players)
        .sort(([,a], [,b]) => {
            const aImpact = a.stats.home_runs * 3 + a.stats.rbi * 2 + a.stats.doubles + a.stats.singles;
            const bImpact = b.stats.home_runs * 3 + b.stats.rbi * 2 + b.stats.doubles + b.stats.singles;
            return bImpact - aImpact;
        })
        .slice(0, 100); // Keep top 100 players

    const compressed = {
        t: {},
        p: {},
        m: {
            ...scoresData.metadata,
            teamsKept: sortedTeams.length,
            playersKept: sortedPlayers.length
        }
    };

    // Add top teams
    sortedTeams.forEach(([teamId, team]) => {
        compressed.t[teamId] = {
            n: team.name,
            h: team.stats.hits,
            e: team.stats.errors,
            s: team.stats.totalscore
        };
    });

    // Add top players
    sortedPlayers.forEach(([playerId, player]) => {
        compressed.p[playerId] = {
            n: player.name,
            hr: player.stats.home_runs,
            s: player.stats.singles,
            d: player.stats.doubles,
            r: player.stats.rbi
        };
    });

    return compressed;
}

// Function to create a summary format for very large datasets
function createScoresDataSummary(scoresData) {
    if (!scoresData || scoresData.error) {
        return scoresData;
    }

    // Calculate summary statistics
    const teamCount = Object.keys(scoresData.teams).length;
    const playerCount = Object.keys(scoresData.players).length;
    
    // Top 5 teams by score
    const topTeams = Object.entries(scoresData.teams)
        .sort(([,a], [,b]) => b.stats.totalscore - a.stats.totalscore)
        .slice(0, 5)
        .map(([id, team]) => `${team.name}:${team.stats.totalscore}`);

    // Top 5 players by home runs
    const topPlayers = Object.entries(scoresData.players)
        .sort(([,a], [,b]) => b.stats.home_runs - a.stats.home_runs)
        .slice(0, 5)
        .map(([id, player]) => `${player.name}:${player.stats.home_runs}HR`);

    return {
        summary: {
            teams: teamCount,
            players: playerCount,
            topTeams: topTeams.join(','),
            topPlayers: topPlayers.join(','),
            totalItems: scoresData.metadata.totalItems
        }
    };
}

function formatMLBData(rawData) {
    console.log(rawData)
    return {
        schedule: formatScheduleData(rawData.schedule),
        standings: formatStandingsData(rawData.standings),
        scores: formatScoresData(rawData.scores)
    }
}

module.exports = {
    formatMLBData,
    compressScoresDataForOpenAI,
    compressScoresDataForOpenAIAdvanced,
    createScoresDataSummary
};
