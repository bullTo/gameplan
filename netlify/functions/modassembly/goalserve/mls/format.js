/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 *
 * Updated for MLS (soccer) GoalServe data structure.
 */

function formatScheduleData(rawData) {
        if (!rawData || !rawData.results || !rawData.results.tournament) {
        return { error: "Invalid or missing results data structure" };
    }

    const tournament = rawData.results.tournament;
    const stages = Array.isArray(tournament.stage) ? tournament.stage : [tournament.stage];

    const formatted = {
        league: tournament['@league'],
        season: tournament['@season'],
        matches: []
    };

    stages.forEach(stage => {
        if (!stage.week) return;
        const weeks = Array.isArray(stage.week) ? stage.week : [stage.week];
        weeks.forEach(week => {
            if (!week.match) return;
            const matches = Array.isArray(week.match) ? week.match : [week.match];
            matches.forEach(match => {
                formatted.matches.push({
                    date: match['@date'],
                    time: match['@time'],
                    status: match['@status'],
                    venue: match['@venue'],
                    home_team: match.localteam['@name'],
                    home_score: match.localteam['@score'],
                    away_team: match.visitorteam['@name'],
                    away_score: match.visitorteam['@score'],
                    halftime_score: match.halftime ? match.halftime['@score'] : '',
                    goals: extractGoals(match.goals),
                    referee: match.referee ? match.referee['@name'] : '',
                    attendance: match['@attendance'] || '',
                });
            });
        });
    });

    return formatted;
}


// Helper to extract goals array
function extractGoals(goalsObj) {
    if (!goalsObj || !goalsObj.goal) return [];
    if (Array.isArray(goalsObj.goal)) {
        return goalsObj.goal.map(goal => ({
            team: goal['@team'],
            minute: goal['@minute'],
            player: goal['@player'],
            score: goal['@score'],
            assist: goal['@assist'] || ''
        }));
    } else {
        const goal = goalsObj.goal;
        return [{
            team: goal['@team'],
            minute: goal['@minute'],
            player: goal['@player'],
            score: goal['@score'],
            assist: goal['@assist'] || ''
        }];
    }
}


function formatStandingsData(rawData) {
    if (!rawData || !rawData.standings || !rawData.standings.tournament) {
        return { error: "Invalid or missing standings data structure" };
    }

    const tournaments = Array.isArray(rawData.standings.tournament)
        ? rawData.standings.tournament
        : [rawData.standings.tournament];

    const formatted = {
        country: rawData.standings['@country'],
        timestamp: rawData.standings['@timestamp'],
        conferences: []
    };

    tournaments.forEach(tournament => {
        const conference = {
            league: tournament['@league'],
            season: tournament['@season'],
            round: tournament['@round'],
            group: tournament['@group'],
            teams: []
        };

        const teams = Array.isArray(tournament.team) ? tournament.team : [tournament.team];
        teams.forEach(team => {
            conference.teams.push({
                position: team['@position'],
                name: team['@name'],
                id: team['@id'],
                recent_form: team['@recent_form'],
                status: team['@status'],
                description: team.description ? team.description['@value'] : '',
                overall: team.overall ? {
                    games_played: team.overall['@gp'],
                    wins: team.overall['@w'],
                    draws: team.overall['@d'],
                    losses: team.overall['@l'],
                    goals_scored: team.overall['@gs'],
                    goals_against: team.overall['@ga']
                } : {},
                home: team.home ? {
                    games_played: team.home['@gp'],
                    wins: team.home['@w'],
                    draws: team.home['@d'],
                    losses: team.home['@l'],
                    goals_scored: team.home['@gs'],
                    goals_against: team.home['@ga']
                } : {},
                away: team.away ? {
                    games_played: team.away['@gp'],
                    wins: team.away['@w'],
                    draws: team.away['@d'],
                    losses: team.away['@l'],
                    goals_scored: team.away['@gs'],
                    goals_against: team.away['@ga']
                } : {},
                total: team.total ? {
                    goal_difference: team.total['@gd'],
                    points: team.total['@p']
                } : {}
            });
        });

        formatted.conferences.push(conference);
    });

    return formatted;
}

function formatScoresData(rawData) {
    if (!rawData || !rawData.commentaries || !rawData.commentaries.tournament) {
        return { error: "Invalid or missing scores data structure" };
    }

    const tournament = rawData.commentaries.tournament;
    const matches = Array.isArray(tournament.match) ? tournament.match : [tournament.match];

    const formatted = {
        league: tournament['@name'],
        id: tournament['@id'],
        matches: []
    };

    matches.forEach(match => {
        // Extract goals for both teams
        const localGoals = extractGoalsFromSummary(match.summary?.localteam?.goals);
        const visitorGoals = extractGoalsFromSummary(match.summary?.visitorteam?.goals);

        formatted.matches.push({
            status: match['@status'],
            date: match['@date'],
            time: match['@time'],
            localteam: {
                name: match.localteam['@name'],
                id: match.localteam['@id'],
                goals: match.localteam['@goals'],
                ht_score: match.localteam['@ht_score'],
                ft_score: match.localteam['@ft_score'],
                et_score: match.localteam['@et_score'],
                pen_score: match.localteam['@pen_score'],
                goalscorers: localGoals
            },
            visitorteam: {
                name: match.visitorteam['@name'],
                id: match.visitorteam['@id'],
                goals: match.visitorteam['@goals'],
                ht_score: match.visitorteam['@ht_score'],
                ft_score: match.visitorteam['@ft_score'],
                et_score: match.visitorteam['@et_score'],
                pen_score: match.visitorteam['@pen_score'],
                goalscorers: visitorGoals
            },
            stadium: match.matchinfo?.stadium?.['@name'] || '',
            referee: match.matchinfo?.referee?.['@name'] || '',
            attendance: match.matchinfo?.attendance?.['@name'] || '',
            summary: match.summary || null,
            stats: match.stats || null,
            teams: match.teams || null,
            substitutes: match.substitutes || null,
            substitutions: match.substitutions || null,
            coaches: match.coaches || null,
            player_stats: match.player_stats || null
        });
    });

    return formatted;
}

// Helper to extract goals array from summary.goals
function extractGoalsFromSummary(goalsObj) {
    if (!goalsObj || !goalsObj.player) return [];
    if (Array.isArray(goalsObj.player)) {
        return goalsObj.player.map(goal => ({
            name: goal['@name'],
            minute: goal['@minute'],
            extra_min: goal['@extra_min'],
            own_goal: goal['@owngoal'] === "True",
            penalty: goal['@penalty'] === "True",
            penalty_missed: goal['@penalty_missed'] === "True",
            var_cancelled: goal['@var_cancelled'] === "True",
            assist_name: goal['@assist_name'] || '',
            assist_id: goal['@assist_id'] || ''
        }));
    } else {
        const goal = goalsObj.player;
        return [{
            name: goal['@name'],
            minute: goal['@minute'],
            extra_min: goal['@extra_min'],
            own_goal: goal['@owngoal'] === "True",
            penalty: goal['@penalty'] === "True",
            penalty_missed: goal['@penalty_missed'] === "True",
            var_cancelled: goal['@var_cancelled'] === "True",
            assist_name: goal['@assist_name'] || '',
            assist_id: goal['@assist_id'] || ''
        }];
    }
}

function formatMLSData(rawData) {
    return {
        schedule: formatScheduleData(rawData),
        standings: formatStandingsData(rawData),
        scores: formatScoresData(rawData)
    }
}

module.exports = {
    formatMLSData
};