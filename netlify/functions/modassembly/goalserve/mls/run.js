/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

const fetch = require('node-fetch');

const API_KEY = process.env.GOALSERVE_API_KEY;

function scoresURLs(baseDate = new Date()) {
    const today = new Date(baseDate);

    const urls = [];
    urls.push(`https://www.goalserve.com/getfeed/${API_KEY}/commentaries/1440?json=1`);

    // Get valid MLS season dates for the past year
    const currentYear = today.getFullYear();
    const lastYear = currentYear - 1;
    
    // Helper function to determine MLS season dates for a given year
    function getMLSSeasonDates(year) {
        const startDate = new Date(year, 2, 20); // March 20th of the given year
        const endDate = new Date(year, 9, 15); // October 15th of the given year
        // If we're in the current year, use today as the end date if before Oct 15
        if (year === currentYear && today < endDate) {
            return { start: startDate, end: today };
        }
        return { start: startDate, end: endDate };
    }
    
    // Get season dates for current and previous year
    const seasons = [
        getMLSSeasonDates(currentYear),
        getMLSSeasonDates(lastYear)
    ];

    // Generate URLs for valid MLS season dates within the past year
    const startDate = new Date(today);
    // Loop through the past 365 days but only include dates in MLS seasons
    for (let i = 0; i < 365; i++) {
        startDate.setDate(startDate.getDate() - 1); // Move to previous day
        // Check if date falls within any of the defined MLS seasons
        const isInSeason = seasons.some(season => 
            startDate >= season.start && startDate <= season.end
        );    
        if (isInSeason) {
            // Format date as DD.MM.YYYY
            const dateDay = startDate.getDate().toString().padStart(2, '0');
            const dateMonth = (startDate.getMonth() + 1).toString().padStart(2, '0');
            const dateYear = startDate.getFullYear();
            const dateString = `${dateDay}.${dateMonth}.${dateYear}`;
            urls.push(`https://www.goalserve.com/getfeed/${API_KEY}/commentaries/1440?date=${dateString}&json=1`);
        }
    }

    return urls;
}

async function fetchWithErrorHandling(url) {
    try {
        console.log(`Fetching ${url}`);
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error(`Failed to fetch ${url}: ${error.message}`);
        return null;
    }
}

async function fetchMLSData(sport, extractedData) {
    const sportLower = sport.toLowerCase();
    if (sportLower !== 'mls') {
        throw new Error('Only MLS is valid for now');
    }

    const scoreUrls = scoresURLs();
    const standingsUrl = `https://www.goalserve.com/getfeed/${API_KEY}/standings/usa.xml?json=1`;
    let scheduleUrl = `https://www.goalserve.com/getfeed/${API_KEY}/soccerfixtures/usa/mls?json=1`;

    // Add dates for scheduled games
    if (extractedData.date1) {
        scheduleUrl += `&date1=${extractedData.date1}`;
    }
    if (extractedData.date2) {
        scheduleUrl += `&date2=${extractedData.date2}`;
    }

    // Fetch standings and schedule
    const standingsPromise = fetchWithErrorHandling(standingsUrl);
    const schedulePromise = fetchWithErrorHandling(scheduleUrl);
    console.log("schedule::", schedulePromise)

    // Fetch scores (first 10 successful)
    const scoresResults = [];
    let successfulFetches = 0;
    const fetchesLimit = 10;
    const batchSize = 10;
    // Process in batches
    for (let i = 0; i < scoreUrls.length && successfulFetches < fetchesLimit; i += batchSize) {
        const batch = scoreUrls.slice(i, i + batchSize);
        // Fetch all URLs in the batch in parallel
        const batchResults = await Promise.all(
            batch.map(url => fetchWithErrorHandling(url))
        );
        // Process results from this batch
        for (const result of batchResults) {
            if (result && successfulFetches < fetchesLimit) {
                scoresResults.push(result);
                successfulFetches++;
            }
        }
    }
    console.log(`Collected ${successfulFetches} scores`);

    // Wait for all promises to resolve
    const [standingsData, scheduleData] = await Promise.all([
        standingsPromise,
        schedulePromise
    ]);
    // Return structured data
    return {
        sport,
        scores: scoresResults[0],
        standings: standingsData.standings,
        schedule: scheduleData.results
    };
}

module.exports = {
    fetchMLSData,
};


