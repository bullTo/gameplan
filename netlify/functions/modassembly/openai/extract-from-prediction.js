/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

async function extractPredictionJson(predictionText) {
  const baseUrl = process.env.URL || process.env.DEPLOY_URL || 'http://localhost:8888';

  // Get today's date in NYC timezone
  const nycDate = new Date().toLocaleString('en-US', { timeZone: 'America/New_York' });
  const today = new Date(nycDate);
  const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

  const response = await fetch(`${baseUrl}/.netlify/functions/openai`, {
    method: 'POST',
    body: JSON.stringify({
      use_claude: true,  // Use OpenAI
      messages: [
        {
          role: 'system',
          content: `
Extract the following JSON object from the text below. 
Return only the JSON object, nothing else.

JSON format:
{
  "sport": "nba, mlb, mls, f1, golf, cfl",
  "bet_type": ["prop, parlay, moneyline, spread, over/under, etc."],
  "match_date": "day.month.year" or null,
  "team_name": "main team mentioned or null",
  "player_name": "main player mentioned or null",
  "opponent": "opposing team or player or null",
  "risk_profile": "low risk, moderate, high risk",
  "odds": "betting odds mentioned or predict like +120, -110",
  "confidence": "predict from the risk assessment as numeric value(%)",
  "suggestion": ["suggestion1 for the bet", "suggestion2 for the bet", "suggestion3 for the bet", ...],
  "analysis": ["analysis of suggestion1", "analysis of suggestion2", "analysis of suggestion3", ...]
}
Suggestion is an array of strings, each string is a suggestion for the bet prompt asks. Suggestion maybe has one value, but in case of parlay, it can have multiple values.
Analysis is an array of strings, each string is a one clear analysis of the suggestion.
confidence includes only number, not %
No need to include text for explanation in odds field. and null is not string.

Text:
${predictionText}
      `
        },
        {
          role: 'user',
          content: predictionText
        }
      ]
    })
  });

  const data = await response.json();
  if (!data.message) {
    throw new Error('Failed to analyze prompt');
  }
  try {
    const predictionsText = data.message.content;
    const firstBrace = predictionsText.indexOf('{');
    const lastBrace = predictionsText.lastIndexOf('}');
    if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
      const jsonString = predictionsText.substring(firstBrace, lastBrace + 1);
      return jsonString;
    }
  } catch (e) {
    console.error('Error parsing OpenAI response:', e);
    throw e;
  }
}

module.exports = {
  extractPredictionJson
};
