/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

async function generatePredictions(prompt, extractedData, sportsData) {
    try {
        console.log(`ðŸ¤– Generating response with OpenAI for prompt: "${prompt}"`);

        const sport = extractedData.sport;
        const betType = extractedData.bet_type || 'general';
        const riskProfile = extractedData.risk_profile || 'moderate';

        // Get current time in NYC timezone
        const nycTime = new Date().toLocaleString('en-US', {
            timeZone: 'America/New_York',
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        });

        const messages = [
            {
                role: 'system',
                content: `You are a sports betting assistant specializing in ${sport} betting. Your task is to provide ${betType} betting suggestions based on the user's prompt and the provided sports data.
  
          The user is looking for suggestions with a ${riskProfile} risk profile.
  
          The sports data provided includes:
          1. Scores - Recent game results with basic information about teams and scores
          2. Standings - Current team rankings in divisions/conferences
          3. Schedule - Upcoming games information
  
          This data is from our database of ${sport} information. The data is from May 2025 and is being used for testing purposes.

          The current time in New York City is ${nycTime}.
  
          Format your response in the following way:
          1. A clear, concise betting suggestion with specific teams, players, and bet types
          2. Supporting reasoning with relevant statistics from the provided data
          3. Risk assessment that explains the confidence level and potential factors that could affect the outcome
  
          Analyze the available data thoroughly, looking at:
          - Team performance based on recent games
          - Team standings and records
          - Matchups in upcoming games
          - Home vs. away performance if available
  
          If the sports data is insufficient, explain what specific data would be needed to make a better recommendation.
  
          Remember that you are providing suggestions for informational purposes only, not encouraging gambling.
  
          IMPORTANT: Base your analysis ONLY on the data provided. Do not reference real-world events, current team performance, or player information that is not included in the provided data.

          After your main response, extract and return the following JSON object based on your suggestion and reasoning:
          {
            "sport": "nba, mlb, nhl, nfl",
            "bet_type": "prop, parlay, moneyline, spread, over/under, etc.",
            "match_date": "day.month.year" or null,
            "team_name": "main team mentioned or null",
            "player_name": "main player mentioned or null",
            "opponent": "opposing team or player or null",
            "risk_profile": "safe bet, moderate, hail mary",
            "odds": "betting odds mentioned or predict, not null",
            "confidence": "predict from the risk assessment as numeric value(%)"
          }
          Respond with your suggestion, then the JSON object on a new line. If a field is not applicable, use null. If odds or confidence are not explicitly mentioned, predict them based on your reasoning and risk assessment.`
            },
            {
                role: 'user',
                content: `My prompt: ${prompt}\n\nHere's the relevant sports data:\n${JSON.stringify(sportsData, null, 2)}`
            }
        ];

        const baseUrl = process.env.URL || process.env.DEPLOY_URL || 'http://localhost:8888';
        const response = await fetch(`${baseUrl}/.netlify/functions/openai`, {
            method: 'POST',
            body: JSON.stringify({
                messages,
                use_claude: false,  // Use OpenAI
                max_tokens: 350   // Increase max tokens for more detailed response
            })
        });
        console.log(`ðŸ“¥ OpenAI response status: ${response.status}`);
        const data = await response.json();

        if (!data.message) {
            throw new Error('Failed to generate response');
        }

        // Extract JSON object from the model's response
        function extractJsonFromResponse(responseText) {
            const firstBrace = responseText.indexOf('{');
            const lastBrace = responseText.indexOf('}');
            if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
                const jsonString = responseText.substring(firstBrace, lastBrace + 1);
                try {
                    return JSON.parse(jsonString);
                } catch (e) {
                    console.error('Failed to parse JSON from model response:', e, jsonString);
                    return null;
                }
            }
            return null;
        }

        const predictionJson = extractJsonFromResponse(data.message.content || data.message);
        let predictionsText = data.message.content || data.message;
        if (predictionJson) {
            // Remove the JSON object from the prediction text
            const firstBrace = predictionsText.indexOf('{');
            if (firstBrace !== -1) {
                predictionsText = predictionsText.substring(0, firstBrace).trim();
            }
        }
        return {
            predictionsText,
            predictionJson
        };
    } catch (error) {
        console.error('Error generating response:', error);
        throw error;
    }
}

module.exports = {
    generatePredictions
};
