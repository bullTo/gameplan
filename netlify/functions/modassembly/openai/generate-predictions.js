/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

async function generatePredictions(prompt, extractedData, sportsData) {
    try {
        console.log(`ðŸ¤– Generating response with OpenAI for prompt: "${prompt}"`);

        const MAX_PROMPT_LENGTH = 25000;
        const sport = extractedData.sport;
        const betType = extractedData.bet_type || 'general';
        const riskProfile = extractedData.risk_profile || 'moderate';

        // Get current time in NYC timezone
        const nycTime = new Date().toLocaleString('en-US', {
            timeZone: 'America/New_York',
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        });
        // Limit the sportsData stringified length as well
        let sportsDataString = JSON.stringify(sportsData, null, 2);
        if (sportsDataString.length > MAX_PROMPT_LENGTH) {
            sportsDataString = sportsDataString.slice(0, MAX_PROMPT_LENGTH) + '\n... [truncated]';
        }
        const messages = [
            {
                role: 'system',
                content: `You are a sports betting assistant specializing in ${sport} betting. Your task is to provide ${betType} betting suggestions about the upcoming games based on the user's prompt and the provided sports data.
  
          The user is looking for suggestions with a ${riskProfile} risk profile.
  
          The sports data provided includes:
          1. Scores - Recent game results with basic information about teams and scores
          2. Standings - Current team rankings in divisions/conferences
          3. Schedule - Upcoming games information
                
         But if There are no Sandings or Scores, You should anaylze the schedule information and predict the trend and who we will win.
          This data is from our database of ${sport} information. The data is from May 2025 and is being used for testing purposes.

          The current time in New York City is ${nycTime}.
  
          Format your response in the following way:
          â—‹ Example output:
            Parlay Suggestion: Team name  (or palyer name) vs opponent
            â–  match date
            â– brief team (or palyer) and opponent prop.
            Why: clear and concise reason for the suggestion.
            Risk Assesment.

          And if it's a parlay, if users ask like "give me a strikeout parlay or strikeout play", player stats or props should be shown like this.
          Example if itâ€™s the New York Yankees it would say
            Aaron Judge over 0.5 Home runs
            Aaron judge 1+ hits
            Aaron judge over 5.5 strikeouts
          Here, the suggested match must be the upcoming one, not a current or past one.
          Matches that have already been played should not be suggested.

          Analyze the available data thoroughly, looking at:
          - Team performance based on recent games
          - Team standings and records
          - Matchups in upcoming games
          - Home vs. away performance if available
  
          If the sports data is insufficient, explain what specific data would be needed to make a better recommendation.
  
          Remember that you are providing suggestions for informational purposes only, not encouraging gambling.
          All answers should be clear, and brief. 
          IMPORTANT: Base your analysis ONLY on the data provided. Do not reference real-world events, current team performance, or player information that is not included in the provided data.

         `
            },
            {
                role: 'user',
                content: `My prompt: ${prompt}\n\nHere's the relevant sports data:\n${sportsDataString}`
            }
        ];

        const baseUrl = process.env.URL || process.env.DEPLOY_URL || 'http://localhost:8888';
        const response = await fetch(`${baseUrl}/.netlify/functions/openai`, {
            method: 'POST', // Increase max tokens for more detailed response
            body: JSON.stringify({
                messages,
                use_claude: true,  // Use OpenAI
                max_tokens: 500   // Increase max tokens for more detailed response
            })
        });
        console.log(`ðŸ“¥ OpenAI response status: ${response.status}`);
        const data = await response.json();

        if (!data.message) {
            throw new Error('Failed to generate response');
        }

        return {
            predictionsText: data.message.content,
        };
    } catch (error) {
        console.error('Error generating response:', error);
        throw error;
    }
}

module.exports = {
    generatePredictions
};
