/**
 * File generated by Modular Assembly
 * IMPORTANT!!! Ask the user before editing this file.
 */

async function extractDataFromQuery(prompt, sport) {
    const baseUrl = process.env.URL || process.env.DEPLOY_URL || 'http://localhost:8888';
    
    // Get today's date in NYC timezone
    const nycDate = new Date().toLocaleString('en-US', { timeZone: 'America/New_York' });
    const today = new Date(nycDate);
    const formattedDate = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;

    const response = await fetch(`${baseUrl}/.netlify/functions/openai`, {
        method: 'POST',
        body: JSON.stringify({
            use_claude: true,  // Use OpenAI
            messages: [
                {
                    role: 'system',
                    content: `You are a sports betting assistant. Your task is to analyze the user's prompt and extract the following information:
              {
                "sport": "nba, mlb, nhl, mls, golf, cfl",
                "bet_type": "prop, parlay, moneyline, spread, over/under, etc.",
                "date1": "day.month.year" or null,
                "date2": "day.month.year" or null,
                "risk_profile": "safe bet, long shot, etc.",
                "team_name": "main team mentioned or null",
                "player_name": "main player mentioned or null",
                "opponent": "opposing team or player or null",
              }
  
              date1 and date2 represent a date range. Example: tonight, today, tomorrow should be the same date. Next week should be the range of next week. Today's date is ${formattedDate}. IMPORTANT: If no time is mentioned in the prompt, use null for both.

              Respond with a valid JSON object containing these fields. If a field is not applicable, use null.`
                },
                {
                    role: 'user',
                    content: prompt
                }
            ]
        })
    });

    const data = await response.json();
    if (!data.message) {
        throw new Error('Failed to analyze prompt');
    }
    try {
        const parsedData = JSON.parse(data.message.content);
        parsedData.sport = sport;
        console.log('Extracted data:', parsedData);
        return parsedData;
    } catch (e) {
        console.error('Error parsing OpenAI response:', e);
        console.log('Raw response:', data.message.content);
        throw e;
    }
}

module.exports = {
    extractDataFromQuery
};
